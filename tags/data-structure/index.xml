<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Data-Structure - Tag - PwzXxm</title><link>https://pwzxxm.com/tags/data-structure/</link><description>Data-Structure - Tag - PwzXxm</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>patrick.weizhixu@hotmail.com (PwzXxm)</managingEditor><webMaster>patrick.weizhixu@hotmail.com (PwzXxm)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 29 May 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://pwzxxm.com/tags/data-structure/" rel="self" type="application/rss+xml"/><item><title>Static Linked List - Another Way To Represent Graphs</title><link>https://pwzxxm.com/static-linked-list/</link><pubDate>Tue, 29 May 2018 00:00:00 +0000</pubDate><author>PwzXxm</author><guid>https://pwzxxm.com/static-linked-list/</guid><description><![CDATA[<p>Static Linked List is a data structure that stores linked list in static arrays. It is usually used to represent graphs. It is very interesting that its Chinese name literally translated as &ldquo;Linked Forward Star&rdquo;. You have two choices of paths to understand this.</p>
<ul>
<li>
<p>Start from <a href="#forward-star" rel="">Forward Star</a>.</p>
</li>
<li>
<p>Start from <a href="#adjacency-list" rel="">Adjacency List</a>.</p>
</li>
</ul>
<p>However, I would recommend to explore both ideas to have a better understanding. If you know some of it or you just don&rsquo;t care, you can jump to <a href="#static-linked-list" rel="">here</a> straight away.</p>]]></description></item><item><title>Binary Tree</title><link>https://pwzxxm.com/binary-tree/</link><pubDate>Fri, 15 Jan 2016 00:00:00 +0000</pubDate><author>PwzXxm</author><guid>https://pwzxxm.com/binary-tree/</guid><description><![CDATA[<p>Binary tree is called so because of its shape. It&rsquo;s like a tree, it have leaves and a root. In computer science, the &ldquo;tree&rdquo; is usually upside down, the root at the top and leaves grow below it. It is binary so it every node only can have 0, 1 or 2 leaves.</p>
<br>
<h2 id="terminologies">Terminologies</h2>
<h3 id="leaf-node">Leaf Node</h3>
<p>The node do NOT have any child nodes.</p>
<h3 id="inner-node">Inner Node</h3>
<p>The Node between the leaf node and the root.</p>]]></description></item><item><title>Stack, Queue and Linked Lists</title><link>https://pwzxxm.com/stack-queue-linked-list/</link><pubDate>Fri, 25 Dec 2015 00:00:00 +0000</pubDate><author>PwzXxm</author><guid>https://pwzxxm.com/stack-queue-linked-list/</guid><description><![CDATA[<p>Stack, queue and Linked lists are basic data structures. They appear in our daily life. For example, stacks of intermodal containers at the port, waiting in line(queue) to ride a roller coaster and the film The Human Centipedeï¼Œif you know it.</p>
<h2 id="stack">Stack</h2>
<h3 id="intro">Intro</h3>
<p>Stack is like a stack of intermodal containers, or a stack of book. Every time you want to put a new item, you put above the original stack, not between or below. Every time you want to remove a item, you need to start from the top, remove the item which is latest added. Hence, there is a principle called &ldquo;<strong>LIFO</strong>&rdquo;, Last In, First Out.</p>]]></description></item></channel></rss>