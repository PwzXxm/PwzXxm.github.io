<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>UVa - Tag - PwzXxm</title><link>https://pwzxxm.com/tags/uva/</link><description>UVa - Tag - PwzXxm</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>patrick.weizhixu@hotmail.com (PwzXxm)</managingEditor><webMaster>patrick.weizhixu@hotmail.com (PwzXxm)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 24 Mar 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://pwzxxm.com/tags/uva/" rel="self" type="application/rss+xml"/><item><title>UVa 108 Maximum Sum</title><link>https://pwzxxm.com/uva-108/</link><pubDate>Thu, 24 Mar 2016 00:00:00 +0000</pubDate><author>PwzXxm</author><guid>https://pwzxxm.com/uva-108/</guid><description>Given an array with size \(N \times N (N \le 100)\), find the maximum value of its subarray.
Link: Problem on UVa
Solutions First thought is to brute force - find all possible subarrays then the time complexity will be \(O(N^6)\). TLE for sure.
Then comes up with an algorithm that takes \(O(N^4)\), which is enough to AC.
However, it can be \(O(N^3)\), see solution 2.
Solution 1 We build a sum array which is the sum of the numbers in rectangle area with the top-left of the array and bottom-right node \(i, j)\).</description></item><item><title>UVa 443 Humble Numbers</title><link>https://pwzxxm.com/uva-443/</link><pubDate>Sun, 20 Mar 2016 22:30:00 +1100</pubDate><author>PwzXxm</author><guid>https://pwzxxm.com/uva-443/</guid><description><![CDATA[Find \(n\)th \( (1 \le n \le 5842)\) number whose only prime factors are 2, 3, 5 or 7.
Link: https://uva.onlinejudge.org/index.php?option=onlinejudge&page=show_problem&problem=384
Solutions Solution 1 Kind of brute force, using STL set and vector to list all humble numbers. Using long long to avoiding overflow.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 #include&lt;iostream&gt; #include&lt;vector&gt; #include&lt;set&gt; using namespace std; typedef long long ll; const int t[] = { 2, 3, 5, 7}; set&lt;ll&gt; s; int main(void) { s.]]></description></item></channel></rss>